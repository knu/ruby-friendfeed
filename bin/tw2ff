#!/usr/bin/env ruby
# -*- mode: ruby; coding: utf-8 -*-

$KCODE = 'u'

require 'pathname'

$LOAD_PATH.unshift(Pathname($0).dirname.parent.join('lib'))

require 'rubygems'
require 'digest'
require 'friendfeed'
require 'friendfeed/unofficial'
require 'friendfeed/v2'
require 'main'
require 'mechanize'
require 'uri'
require 'tempfile'
require 'twitter'
require 'yaml'
require 'yaml/store'

MYNAME = File.basename($0)

TWITTER_URI = URI.parse('http://twitter.com/')

def ConfigDir()
  $config_dir ||=
    begin
      config_dir = File.expand_path('~/.%s' % MYNAME)
      if !File.directory?(config_dir)
        Dir.mkdir(config_dir, 0700)
      end
      config_dir
    end
end

def ConfigFile()
  $config_file ||= File.join(ConfigDir(), 'config.yml')
end

def Config(keypath, default = :omitted)
  $config ||= YAML.load_file(ConfigFile())

  keypath.split('.').inject($config) { |hash, key|
    hash.is_a?(Hash) or raise TypeError
    hash.fetch(key)
  }
rescue => e
  return default if default != :omitted
  
  STDERR.print <<EOM
The key "#{keypath}" is missing in #{ConfigFile()}.
Please run "#{$0} config" and fill out necessary information.
EOM
  exit 1
end

def putinfo(fmt, *args)
  STDERR.puts sprintf(fmt, *args)
end

def Status(key)
  $status ||= YAML::Store.new(File.join(ConfigDir(), 'status.yml'))
  if block_given?
    $status.transaction(false) {
      return $status[key] = yield
    }
  else
    $status.transaction(true) {
      return $status[key]
    }
  end
end

def agent
  $agent ||= Mechanize.new
end

def parse_uri(url)
  case url
  when URI
    url
  else
    begin
      URI.parse(url)
    rescue URI::InvalidURIError
      dir, file = File.split(url)
      URI.parse(File.join(dir, URI.escape(file)))
    end
  end
end

def get_file(url)
  uri = parse_uri(url)
  putinfo 'Fetching %s', uri
  agent.get_file(uri)
end

class FriendFeed::Client
  def change_picture_to_url(id, url)
    t = Tempfile.open("picture")
    t.write get_file(url)
    t.close
    File.open(t.path) { |f|
      change_picture(id, f)
    }
    t.unlink
  end
end

def friendfeed_client
  $ff_client ||=
    begin
      username = Config('friendfeed.username')
      password = Config('friendfeed.password')
      putinfo 'Logging in to FriendFeed as %s', username
      FriendFeed::Client.new.login(username, password)
    end
end

def friendfeedv2_client
  $ffv2_client ||=
    begin
      ffcli = friendfeed_client()
      httpauth = FriendFeed::V2::HTTPAuth.new(ffcli.nickname, ffcli.remote_key)
      FriendFeed::V2::Client.new(httpauth)
    end
end

class Twitter::Base
  def all_friends
    list = []
    cursor = -1
    loop {
      result = friends(:cursor => cursor)
      break if result.users.nil?
      list.concat(result.users)
      cursor = result[:next_cursor]
      break if cursor.zero?
    }
    list
  end

  def get_profile(name)
    friends(:screen_name => name).first
  end
end

def twitter_client
  $tw_client ||=
    begin
      username = Config('twitter.username')
      password = Config('twitter.password')
      putinfo 'Logging in to Twitter as %s', username
      Twitter::Base.new(Twitter::HTTPAuth.new(username, password))
    end
end

Main {
  description 'Twitter to FriendFeed migration helper'

  def run
    print usage.to_s
  end

  mode 'config' do
    description 'Edit the configuration file'

    def run
      if !File.exist?(ConfigFile())
        File.open(ConfigFile(), 'w') { |f|
          f.print <<EOF
--- 
friendfeed: 
  username: "username"
  password: "password"
twitter: 
  username: "username"
  password: "password"
EOF
        }
      end

      system ENV['VISUAL'] || ENV['EDITOR'] || 'vi', ConfigFile()
    end
  end
  
  mode 'friends' do
    description 'Import Twitter-only friends to FriendFeed as "imaginary friends"'

    def run
      require 'set'

      ffcli = friendfeed_client()

      subscribed_real = Set[]
      subscribed_imag = Set[]

      putinfo "Checking real friends in FriendFeed..."
      ffcli.get_real_friends.each { |profile|
        profile['services'].each { |service|
          url = service['profileUrl'] or next
          if (name = TWITTER_URI.route_to(url).to_s).match(/\A[A-Za-z0-9_]+\z/)
            putinfo 'Found a Twitter friend %s in FriendFeed', name
            subscribed_real << name.downcase
          end
        }
      }

      putinfo "Checking imaginary friends in FriendFeed..."
      ffcli.get_imaginary_friends.each { |profile|
        profile['services'].each { |service|
          url = service['profileUrl'] or next
          if (name = TWITTER_URI.route_to(url).to_s).match(/\A[A-Za-z0-9_]+\z/)
            putinfo 'Found a Twitter friend %s in FriendFeed (imaginary)', name
            subscribed_imag << name.downcase
          end
        }
      }

      putinfo "Checking groups in FriendFeed..."
      ffcli.get_profile['rooms'].each { |room|
        ffcli.get_services(room['nickname']).each { |service|
          url = service['profileUrl'] or next
          if (name = TWITTER_URI.route_to(url).to_s).match(/\A[A-Za-z0-9_]+\z/)
            putinfo 'Found a Twitter friend %s in FriendFeed (group)', name
            subscribed_imag << name.downcase
          end
        }
      }

      Status('friends_subscribed_real') { subscribed_real.sort }
      Status('friends_subscribed_imag') { subscribed_imag.sort }

      (subscribed_real & subscribed_imag).each { |name|
        putinfo 'Duplicated subscription: %s', name
      }

      subscribed = subscribed_real + subscribed_imag

      friends = Set[]
      to_subscribe = Set[]
      to_watch = Set[]
      picture_urls = {}

      twitter_client().all_friends.each { |friend|
        name = friend.screen_name.downcase
        friends << name
        next if subscribed.include?(name)

        if friend.protected
          to_watch << name
        else
          to_subscribe << name
          picture_urls[name] = friend.profile_image_url
        end
      }
      twitter_me = Config('twitter.username')
      friends << twitter_me

      Status('friends') { friends.sort }
      Status('friends_to_watch') { to_watch.sort }

      to_watch.each { |name|
        putinfo 'Skipping a protected user %s', name
      }

      to_subscribe.each { |name|
        putinfo 'Creating an imaginary friend for %s', name
        id = ffcli.create_imaginary_friend('(%s)' % name)
        ffcli.add_twitter(id, name)
        if url = picture_urls[name]
          putinfo 'Setting the picture of %s', name
          ffcli.change_picture_to_url(id, url)
        end
      }

      printf <<-EOS, 'http://friendfeed.com/friends/twitter?username=' + URI.escape(twitter_me)

You may also want to check out the following page
to see if someone is joining FriendFeed:
	%s
      EOS
    end
  end

  mode 'icons' do
    description 'Update imaginary friends icons with those of their Twitter accounts'

    def run
      twcli = twitter_client()

      picture_urls = {}

      twcli.all_friends.each { |friend|
        name = friend.screen_name.downcase
        picture_urls[name] = friend.profile_image_url
      }

      ffcli = friendfeed_client()

      putinfo "Checking imaginary friends in FriendFeed..."
      ffcli.get_imaginary_friends.each { |profile|
        profile['services'].each { |service|
          url = service['profileUrl'] or next
          if (name = TWITTER_URI.route_to(url).to_s).match(/\A[A-Za-z0-9_]+\z/)
            name.downcase!
            if picture_urls.key?(name)
              url = picture_urls[name]
            else
              friend = twcli.get_profile(name) rescue
                begin
                  putinfo "Failed to get profile of %s", name
                  next
                end
              url = friend.profile_image_url
            end
            id = profile['id']
            putinfo 'Changing the picture of %s', name
            ffcli.change_picture_to_url(id, url)
          end
        }
      }
    end
  end

  mode 'favorites' do
    description 'Synchronize Twitter favorites and FriendFeed likes as far as possible'

    def run
      require 'set'

      ffv2cli = friendfeedv2_client

      ffcli = friendfeed_client()
      ff_me = ffcli.nickname

      twcli = twitter_client()

      favorited = Set[]
      ffim_favorited = Set[]

      twcli.favorites.each { |favorite|
        id = favorite.id
        if m = favorite.text.match(%r{http://ff\.im/([A-Za-z0-9]+)})
          ffim_favorited << [id, favorite.user.screen_name, m[1]]
        end
        favorited << id
      }

      liked = Set[]
      tw_uri = {}
      nontw_liked = Set[]
      feedinfo = {}

      ffv2cli = friendfeedv2_client

      ffv2cli.get_feed([ff_me, :likes]).entries.each { |entry|
        via = entry.via or next
        case via.name
        when 'Twitter'
          uri = via.url
          case TWITTER_URI.route_to(uri).to_s
          when %r{\A([A-Za-z0-9_]+)/statuses/([0-9]+)\z}
            id = $2.to_i
            liked << id
            tw_uri[id] = uri
            next
          end
        end
        # The entry is not from Twitter
        user = entry.from.id
        info = (feedinfo[user] ||= ffv2cli.get_feedinfo(user))
        if twitter = info.services.find { |service| service.id == 'twitter' }
          nontw_liked << [entry, twitter.username]
        end
      }

      # Favorite FriendFeed-liked entry in Twitter
      (liked - favorited).each { |id|
        putinfo "Adding a favorite in Twitter: %s", tw_uri[id]
        begin
          twcli.favorite_create(id)
        rescue
          # Maybe already favorited a long ago
        end
      }

      # Find Twitter-liked entries in FriendFeed that aren't liked yet
      (
        ffcli.get_user_friend_entries(nil, 'service' => 'twitter') +
        ffcli.get_user_discussed_entries(nil, 'service' => 'twitter')
        # Currently imaginary friends entries are not checked
      ).sort_by { |entry|
        entry["published"]
      }.each { |entry|
        # Just in case this entry is not covered by the 'liked' list
        next if entry['likes'].any? { |like| like['user']['nickname'] == ff_me }

        # Is the source Twitter?
        url = entry['service']['profileUrl'] or next
        m = TWITTER_URI.route_to(url).to_s.match(%r{\A([A-Za-z0-9_]+)/statuses/([0-9]+)\z}) or next
        id = m[2].to_i

        # A different entry with the same source may be liked already
        next if liked.include?(id)

        if favorited.include?(id)
          entryid = entry['id']
          putinfo "Adding a like in FriendFeed: %s", entry['link']
          ffcli.add_like(entryid)
          liked << id
        end
      }

      ffim_favorited.each { |id, name, short_id|
        next if liked.include?(id)
        next if nontw_liked.reject! { |entry, username| entry.short_id == short_id }

        entry = ffv2cli.decode_short(short_id) or next
        user = entry.from.id
        info = (feedinfo[user] ||= ffv2cli.get_feedinfo(user))
        twitter = info.services.find { |service| service.id == 'twitter' } or next
        if twitter.username == name
          putinfo "Adding a like in FriendFeed: %s", entry['link']
          ffcli.add_like(entry.id)
          liked << id
        end
      }
      nontw_liked.each { |entry, nickname|
        search = Twitter::Search.new
        search.from(nickname)
        search.contains(entry.short_url.to_s)
        search.each { |result|
          id = result.id
          uri = TWITTER_URI + '%s/statuses/%d' % [result.from_user, result.id]
          putinfo "Adding a favorite in Twitter: %s", uri
          begin
            twcli.favorite_create(id)
            liked << id
          rescue
            # Maybe already favorited
          end
        }
      }
    end
  end

  mode 'replies' do
    description 'Produce an RSS feed of Twitter @replies'

    option('include-friends') {
      description 'Include @reples from friends'

      cast :bool
      default false
    }

    option('include-protected') {
      description 'Include @reples from protected users'

      cast :bool
      default false
    }

    argument('filename') {
      description 'Output RSS to this file'
    }

    def run
      require 'nokogiri'
      require 'rss'
      require 'set'
      require 'time'

      include_friends   = params['include-friends'].value
      include_protected = params['include-protected'].value
      filename = params['filename'].value

      File.open(filename, 'w') { |w|
        feed = RSS::Maker.make("2.0") { |rss|
          rss.channel.title = 'Twitter replies'
          rss.channel.link = 'http://twitter.com/replies'
          rss.channel.description = 'Twitter replies'

          friends = Status('friends').to_set

          twitter_client().mentions.each { |reply|
            user = reply.user
            next if !include_protected && user.protected
            name = user.screen_name
            next if !include_friends && friends.include?(name.downcase)
            text = '%s: %s' % [name, reply.text]
            url = 'http://twitter.com/%s/statuses/%d' % [name, reply.id]
            timestamp = Time.parse(reply.created_at)
            rss.items.new_item { |item|
              item.title = Nokogiri.HTML(text).inner_text
              item.link = url
              item.description = text
              item.date = timestamp
            }
          }
        }
        w.print feed.to_s
      }
    end
  end

  mode 'protected' do
    description 'Produce an RSS feed for Twitter entries from protected friends'

    argument('filename') {
      description 'Output RSS to this file'
    }

    def run
      require 'nokogiri'
      require 'rss'
      require 'set'
      require 'time'

      filename = params['filename'].value

      friends = Status('friends').to_set
      friends_subscribed_real = Status('friends_subscribed_real').to_set

      items = []

      twitter_client().mentions.each { |reply|
        user = reply.user
        next if !user.protected
        name = user.screen_name
        next if friends.include?(name.downcase)

        text = '[%s]: %s' % [name, reply.text]
        url = 'http://twitter.com/%s/statuses/%d' % [name, reply.id]
        timestamp = Time.parse(reply.created_at)
        items << [timestamp, text, url]
      }

      twitter_client().friends_timeline.each { |status| 
        user = status.user
        next if !user.protected
        name = user.screen_name
        next if friends_subscribed_real.include?(name.downcase)
        text = '[%s]: %s' % [name, status.text]
        url = 'http://twitter.com/%s/statuses/%d' % [name, status.id]
        timestamp = Time.parse(status.created_at)
        items << [timestamp, text, url]
      }

      File.open(filename, 'w') { |w|
        feed = RSS::Maker.make("2.0") { |rss|
          rss.channel.title = 'Twitter entries from protected friends'
          rss.channel.link = 'http://twitter.com/home'
          rss.channel.description = 'Twitter entries from protected friends'

          items.sort { |a, b|
            b.first <=> a.first
          }.each { |timestamp, text, url|
            rss.items.new_item { |item|
              item.title = Nokogiri.HTML(text).inner_text
              item.link = url
              item.description = text
              item.date = timestamp
            }
          }
        }
        w.print feed.to_s
      }
    end
  end
  
  mode 'refresh' do
    description 'Urge FriendFeed to refresh services (import feed entries)'

    def run
      ffcli = friendfeed_client()
      profile = ffcli.get_profile

      ffcli.get_services.each { |service|
        putinfo "Refreshing %s..." % service['service']
        ffcli.refresh_service(profile['id'], service['serviceid'], service['service'])
      }
    end
  end
}
